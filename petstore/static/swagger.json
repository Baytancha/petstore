{
    "schemes": [
      "https",
      "http"
    ],
    "swagger": "2.0",
    "info": {
      "description": "This is a sample server Petstore server. ",
      "title": "Swagger Petstore",
      "termsOfService": "http://swagger.io/terms/",
      "contact": {
        "email": "apiteam@swagger.io"
      },
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "version": "1.0.7"
    },
    "host": "petstore.swagger.io",
    "basePath": "/v2",
    "paths": {
      "/pet": {
        "put": {
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "consumes": [
            "application/json",
            "application/xml"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "pet"
          ],
          "summary": "Update an existing pet",
          "operationId": "updatePet",
          "parameters": [
            {
              "description": "Pet object that needs to be added to the store",
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Pet"
              }
            }
          ]
        },
        "post": {
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "consumes": [
            "application/json",
            "application/xml"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "pet"
          ],
          "summary": "Add a new pet to the store",
          "operationId": "addPet",
          "parameters": [
            {
              "description": "Pet object that needs to be added to the store",
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Pet"
              }
            }
          ]
        }
      },
      "/pet/findByStatus": {
        "get": {
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "description": "Multiple status values can be provided with comma separated strings",
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "pet"
          ],
          "summary": "Finds Pets by status",
          "operationId": "findPetsByStatus",
          "parameters": [
            {
              "type": "array",
              "items": {
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ],
                "type": "string",
                "default": "available"
              },
              "collectionFormat": "multi",
              "description": "Status values that need to be considered for filter",
              "name": "status",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Pet"
                }
              }
            }
          }
        }
      },
      "/pet/findByTags": {
        "get": {
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "pet"
          ],
          "summary": "Finds Pets by tags",
          "operationId": "findPetsByTags",
          "deprecated": true,
          "parameters": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "description": "Tags to filter by",
              "name": "tags",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Pet"
                }
              }
            }

          }
        }
      },
      "/pet/{petId}": {
        "get": {
          "security": [
            {
              "api_key": []
            }
          ],
          "description": "Returns a single pet",
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "pet"
          ],
          "summary": "Find pet by ID",
          "operationId": "getPetById",
          "parameters": [
            {
              "type": "integer",
              "format": "int64",
              "description": "ID of pet to return",
              "name": "petId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Pet"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "pet"
          ],
          "summary": "Updates a pet in the store with form data",
          "operationId": "updatePetWithForm",
          "parameters": [
            {
              "type": "integer",
              "format": "int64",
              "description": "ID of pet that needs to be updated",
              "name": "petId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "Updated name of the pet",
              "name": "name",
              "in": "formData"
            },
            {
              "type": "string",
              "description": "Updated status of the pet",
              "name": "status",
              "in": "formData"
            }
          ]
        },
        "delete": {
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "pet"
          ],
          "summary": "Deletes a pet",
          "operationId": "deletePet",
          "parameters": [
            {
              "type": "string",
              "name": "api_key",
              "in": "header"
            },
            {
              "type": "integer",
              "format": "int64",
              "description": "Pet id to delete",
              "name": "petId",
              "in": "path",
              "required": true
            }
          ]
        }
      },
      "/store/inventory": {
        "get": {
          "security": [
            {
              "api_key": []
            }
          ],
          "description": "Returns a map of status codes to quantities",
          "produces": [
            "application/json"
          ],
          "tags": [
            "store"
          ],
          "summary": "Returns pet inventories by status",
          "operationId": "getInventory",
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "/store/order": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "store"
          ],
          "summary": "Place an order for a pet",
          "operationId": "placeOrder",
          "parameters": [
            {
              "description": "order placed for purchasing the pet",
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Order"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      },
      "/store/order/{orderId}": {
        "get": {
          "description": "For valid response try integer IDs with value \u003e= 1 and \u003c= 10. Other values will generated exceptions",
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "store"
          ],
          "summary": "Find purchase order by ID",
          "operationId": "getOrderById",
          "parameters": [
            {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "description": "ID of pet that needs to be fetched",
              "name": "orderId",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Order"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            }
          }
        },
        "delete": {
          "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "store"
          ],
          "summary": "Delete purchase order by ID",
          "operationId": "deleteOrder",
          "parameters": [
            {
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "description": "ID of the order that needs to be deleted",
              "name": "orderId",
              "in": "path",
              "required": true
            }
          ]
        }
      },
      "/user": {
        "post": {
          "description": "This can only be done by the logged in user.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "user"
          ],
          "summary": "Create user",
          "operationId": "createUser",
          "parameters": [
            {
              "description": "Created user object",
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/user/createWithArray": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "user"
          ],
          "summary": "Creates list of users with given input array",
          "operationId": "createUsersWithArrayInput",
          "parameters": [
            {
              "description": "List of user object",
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/user/createWithList": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "user"
          ],
          "summary": "Creates list of users with given input array",
          "operationId": "createUsersWithListInput",
          "parameters": [
            {
              "description": "List of user object",
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/user/login": {
        "get": {
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "user"
          ],
          "summary": "Logs user into the system",
          "operationId": "loginUser",
          "parameters": [
            {
              "type": "string",
              "description": "The user name for login",
              "name": "username",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "description": "The password for login in clear text",
              "name": "password",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "string"
              },
              "headers": {
                "X-Expires-After": {
                  "type": "string",
                  "format": "date-time",
                  "description": "date in UTC when token expires"
                },
                "X-Rate-Limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "calls per hour allowed by the user"
                }
              }
            },
            "400": {
              "description": "Invalid username/password supplied"
            }
          }
        }
      },
      "/user/logout": {
        "get": {
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "user"
          ],
          "summary": "Logs out current logged in user session",
          "operationId": "logoutUser",
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/user/{username}": {
        "get": {
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "user"
          ],
          "summary": "Get user by user name",
          "operationId": "getUserByName",
          "parameters": [
            {
              "type": "string",
              "description": "The name that needs to be fetched. Use user1 for testing. ",
              "name": "username",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "put": {
          "description": "This can only be done by the logged in user.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "user"
          ],
          "summary": "Updated user",
          "operationId": "updateUser",
          "parameters": [
            {
              "type": "string",
              "description": "name that need to be updated",
              "name": "username",
              "in": "path",
              "required": true
            },
            {
              "description": "Updated user object",
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ]
        },
        "delete": {
          "description": "This can only be done by the logged in user.",
          "produces": [
            "application/json",
            "application/xml"
          ],
          "tags": [
            "user"
          ],
          "summary": "Delete user",
          "operationId": "deleteUser",
          "parameters": [
            {
              "type": "string",
              "description": "The name that needs to be deleted",
              "name": "username",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      }
    },
    "definitions": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "Order Status",
            "type": "string",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "Pet": {
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "category": {
            "$ref": "#/definitions/Category"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            },
            "xml": {
              "wrapped": true
            }
          },
          "status": {
            "description": "pet status in the store",
            "type": "string",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Tag",
              "xml": {
                "name": "tag"
              }
            },
            "xml": {
              "wrapped": true
            }
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "description": "User Status",
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        }
      }
    },
    "securityDefinitions": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "petstore_auth": {
        "type": "oauth2",
        "flow": "implicit",
        "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
        "scopes": {
          "read:pets": "read your pets",
          "write:pets": "modify pets in your account"
        }
      }
    },
    "tags": [
      {
        "description": "Everything about your Pets",
        "name": "pet",
        "externalDocs": {
          "description": "Find out more",
          "url": "http://swagger.io"
        }
      },
      {
        "description": "Access to Petstore orders",
        "name": "store"
      },
      {
        "description": "Operations about user",
        "name": "user",
        "externalDocs": {
          "description": "Find out more about our store",
          "url": "http://swagger.io"
        }
      }
    ],
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    }
  }
    